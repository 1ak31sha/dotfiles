1. Explain the standard javascript toolchain
- linting
- dependancy management(npm)
- transpilation (bable)
- compilation( css)
- minification

browser stack

linting -not too familiar
how to add a dependancy
transpilers
minification √

---
2. what can you tell me about JSX?
- transpiled into ES5

---
no
3. The prototype chain
When it comes to inheritance, JavaScript only has one construct: objects. Each object has a private property which holds a link to another object called its prototype.
That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype.
By definition, null has no prototype, and acts as the final link in this prototype chain.

Nearly all objects in JavaScript are instances of Object which sits on the top of a prototype chain.

While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model.
It is, for example, fairly trivial to build a classic model on top of a prototypal model.


3. What is a component in React
b) Which feature can we use to cause a component to render only when its ID changes?
c) write a component that conditionally renders some output

2. Walk me through the rEact life cycle methods:
componentWillMount() – Executed just before rendering takes place both on the client as well as server-side.
componentDidMount() – Executed on the client side only after the first render.
componentWillReceiveProps() – Invoked as soon as the props are received from the parent class and before another render is called.
shouldComponentUpdate() – Returns true or false value based on certain conditions. If you want your component to update, return true else return false. By default, it returns false.
componentWillUpdate() – Called just before rendering takes place in the DOM.
componentDidUpdate() – Called immediately after rendering takes place.
componentWillUnmount() – Called after the component is unmounted from the DOM. It is used to clear up the memory spaces.


3. What is a Higher Order Component?
Creating an HOC means handling this.props.children in the Component’s code:

4. importance of Keys:
Keys in React are used to identify unique VDOM Elements with their corresponding data driving the UI;
having them helps React optimize rendering by recycling existing DOM elements. Let’s look at an example to portray this.

5. a) How can you update the state of a component:

5. b) Do you know Redux, and if so explain the main concepts and why they are helpful
advatanges - no
single source
6. Why do we need a Router?
A Router is used to define multiple routes and when a user types a specific URL,
if this URL matches the path of any ‘route’ defined inside the router, then the user is redirected to that particular route. So basically,
we need to add a Router library to our app that allows creating multiple routes with each leading to us a unique view.
Topic	Conventional Routing	React Routing
PAGES INVOLVED	Each view corresponds to a new file	Only single HTML page is involved
URL CHANGES	A HTTP request is sent to a server and corresponding HTML page is received	Only the History attribute is changed
FEEL	User actually navigates across different pages for each view	User is duped thinking he is navigating across different pages



8) promises

promise.all
static vs dynamic √


cloud services
-not really
no dns
- perm gen


