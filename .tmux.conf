# initialize window for react native dev
#new  -s SessionName -n WindowName Command
#neww -n foo/bar foo
#splitw -v -p 50 -t 0 bar
#selectw -t 1 
#selectp -t 0

#bind c new-window      -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

#set inactive/active window styles
set -g window-style 'fg=colour247,bg=colour236'
set -g window-active-style 'fg=colour250,bg=black'

# set the pane border colors 
set -g pane-border-fg colour250
set -g pane-border-bg colour236
set -g pane-active-border-fg colour250 
set -g pane-active-border-bg colour250


set -g mouse off
set-option -g default-terminal "screen-256color"
#set -ga terminal-overrides ",tmux-256color:Tc"
set -g default-terminal "xterm-256color"
#set -g default-terminal "tmux-256color"
set-option -g prefix C-a
#set prefix C-a
unbind-key C-b
bind-key C-a send-prefix
bind-key M-b last-window

bind a send-prefix
bind b send-prefix
# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Set status bar
set -g status-bg black
set -g status-fg white
set -g status-left ""
set -g status-right "#[fg=green]#H"
set -g status-right ' #{?client_prefix,#[reverse]<Prefix>#[noreverse] ,}"#{=21:pane_title}" %H:%M %d-%b-%y'



# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
#setw -g monitor-activity on
#set -g visual-activity on

# Example of using a shell command in the status line
#set -g status-right "#[fg=yellow]#(uptime | cut -d ',' -f 2-)"

# Highlight active window
set-window-option -g window-status-current-bg red
#

#############################################3
# force a reload of the config file
#unbind r
#bind r source-file ~/.tmux.conf \; display "Reloaded!"
#
#is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind ^u copy-mode
bind u copy-mode

# paste buffer
unbind p
bind p paste-buffer
bind ^p paste-buffer

# vi-like movement
bind -Tcopy-mode-vi 'v' send -X begin-selection
bind -Tcopy-mode-vi 'y' send -X copy-selection#

